version: "3.9"

services:
  #Auth service
  auth-db:
    image: postgres:13-alpine
    networks:
      - services_api
    volumes:
      - flask_auth_db_data:/var/lib/postgresql/data/
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}


  auth-redis:
    networks:
      - services_api
    image: redis:6.2-alpine
    restart: always
    volumes:
      - auth-redis_data:/data

  jaeger-trace:
    networks:
      - services_api
    image: jaegertracing/all-in-one:latest
    ports:
      - "6831:6831/udp"
      - "16686:16686"

  flask-auth:
    networks:
      - services_api
    build: ./authapp
    expose:
      - 8000
    depends_on:
      - auth-db
      - auth-redis
      - jaeger-trace
    env_file:
      - .env
    environment:
      JAEGER_PORT: 6831
      JAEGER_HOST: jaeger-trace
      PYTHONPATH: $PYTHONPATH:/authapp

# Async Api
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.16.3
    volumes:
      - new_admin_panel_sprint_3_elasticsearch-data:/usr/share/elasticsearch/data
    logging:
      driver: none
    networks:
      - services_api
    environment:
      - xpack.monitoring.enabled=true
      - xpack.watcher.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
      - discovery.type=single-node

  redis-cache:
    networks:
      - services_api
    image: redis:6.2-alpine
    restart: always
    volumes:
      - cache:/data

  web:
    build: ./fastapi-solution
    networks:
      - services_api
    depends_on:
      - elasticsearch
      - redis-cache
    env_file:
      - .env
    environment:
      ENV: prod
      ES_HOST: elasticsearch
      REDIS_HOST: redis-cache
    command:
      [
        "uvicorn",
        "app.main:app",
        "--host",
        "0.0.0.0",
        "--port",
        "8000"
      ]

  # UGCService
  ugc-redis-limiter:
    image: redis:6.2-alpine
    networks:
      - services_api
    restart: always

  ugcservice:
    build: ./ugcservice
    networks:
      - kafka_docker
      - services_api
    expose:
      - 8000
    depends_on:
      - ugc-redis-limiter
    env_file:
      - .env
    restart: on-failure
    command:
      [
        "uvicorn",
        "app.main:app",
        "--host",
        "0.0.0.0",
        "--port",
        "8000"
      ]

  nginx:
    build: ./nginx
    networks:
      - services_api
    ports:
      - 8000:80
    depends_on:
      - flask-auth
      - web
      - ugcservice

  ugc-etl:
    build: ./etl
    networks:
      - kafka_docker
      - services_api
      - clickhouse_docker
    env_file:
      - .env
    command:
      [
        "python3",
        "etl_run.py"
      ]
    restart: on-failure


volumes:
  new_admin_panel_sprint_3_elasticsearch-data:
    external: true
  flask_auth_db_data:
  auth-redis_data:
  cache:


networks:
  kafka_docker:
    external: true
  clickhouse_docker:
    external: true
  services_api:
    name: services_api
    driver: bridge